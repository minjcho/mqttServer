# ===========================================
# Environment Configuration Template
# ===========================================
# Copy this file to .env and fill in your values
# DO NOT commit .env file to version control

# ===========================================
# MQTT Broker Authentication (REQUIRED)
# ===========================================
# ⚠️ SECURITY WARNING: You MUST set these before starting services!
# ⚠️ DO NOT use default values in production!
#
# Generate strong credentials:
#   Username: Choose a unique username (not 'mqttuser', 'admin', etc.)
#   Password: openssl rand -base64 24
#
# Services will fail to start if:
# - These variables are not set
# - Weak/default values are detected
# - Password is less than 12 characters
MQTT_USERNAME=your_mqtt_username_here
MQTT_PASSWORD=your_strong_mqtt_password_here

# ===========================================
# MQTT Configuration (mqtt-bridge)
# ===========================================
MQTT_HOST=mosquitto
MQTT_PORT=1883
MQTT_TOPICS=sensors/+/coordinates

# ===========================================
# Logging Configuration
# ===========================================
# Log level for Python services (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# ===========================================
# Kafka Configuration
# ===========================================
KAFKA_BROKERS=kafka:9092
KAFKA_TOPIC=mqtt-messages
KAFKA_ACKS=all
KAFKA_RETRIES=3
KAFKA_RETRY_BACKOFF_MS=100

# Kafka Bootstrap Servers (for consumer)
KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# ===========================================
# Redis Configuration (MQTT System)
# ===========================================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# ===========================================
# PostgreSQL Configuration (QR Login)
# ===========================================
# ⚠️ SECURITY WARNING: Change DATABASE_PASSWORD before deployment!
# Generate: openssl rand -base64 24
DATABASE_HOST=db
DATABASE_PORT=5433
DATABASE_NAME=qrlogin
DATABASE_USER=qrlogin
DATABASE_PASSWORD=your_database_password_here

# ===========================================
# Redis Configuration (QR Login)
# ===========================================
QR_REDIS_HOST=qr-redis
QR_REDIS_PORT=6378

# ===========================================
# JWT Configuration (QR Login)
# ===========================================
# ⚠️ CRITICAL SECURITY WARNING: You MUST generate a strong JWT secret!
# ⚠️ Services will fail to start with weak or default values!
#
# Generate a secure 64-byte secret:
#   openssl rand -base64 64
#
# Requirements:
# - Minimum 64 characters
# - Base64 encoded
# - Cannot contain 'CHANGE', 'SECRET', 'PLEASE', etc.
JWT_SECRET=your_jwt_secret_here_generate_with_openssl_rand_base64_64
JWT_ACCESS_TOKEN_EXPIRATION=900000       # 15 minutes
JWT_REFRESH_TOKEN_EXPIRATION=604800000   # 7 days

# ===========================================
# Spring Configuration (QR Login)
# ===========================================
SPRING_PROFILES_ACTIVE=docker
JAVA_OPTS=-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom

# ===========================================
# Notes
# ===========================================
# 1. For local development, copy this file to .env
# 2. For production, use environment-specific secrets management:
#    - AWS: AWS Secrets Manager or Parameter Store
#    - Kubernetes: Secrets and ConfigMaps
#    - Docker Swarm: Docker Secrets
# 3. Never commit real secrets to version control
# 4. Rotate secrets regularly
