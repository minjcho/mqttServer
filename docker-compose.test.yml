# ===========================================
# Docker Compose - Test Environment
# ===========================================
# Optimized configuration for running integration tests
# Use: docker-compose -f docker-compose.test.yml up

version: '3.8'

services:
  mosquitto:
    build:
      context: ./mosquitto
    container_name: test-mosquitto
    ports:
      - "1883:1883"
      - "3123:3123"
    environment:
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    volumes:
      - test_mosquitto_data:/mosquitto/data
      - test_mosquitto_config:/mosquitto/config
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-p", "3123", "-t", "test", "-m", "test", "-u", "${MQTT_USERNAME}", "-P", "${MQTT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    build:
      context: ./kafka
    container_name: test-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: "test-cluster-id"
    volumes:
      - ./kafka/scripts:/scripts
    networks:
      - test_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 5

  telegraf:
    build:
      context: ./telegraf
    container_name: test-telegraf
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    environment:
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    networks:
      - test_network

  redis:
    image: redis:7.2-alpine
    container_name: test-redis
    ports:
      - "6379:6379"
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  qr-redis:
    image: redis:7-alpine
    container_name: test-qr-redis
    ports:
      - "6378:6378"
    command: redis-server --port 6378
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6378", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  qr-postgres:
    image: postgres:16-alpine
    container_name: test-qr-postgres
    ports:
      - "5433:5433"
    environment:
      POSTGRES_DB: qrlogin_test
      POSTGRES_USER: qrlogin_test
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGPORT: 5433
    networks:
      - test_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qrlogin_test -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["postgres", "-p", "5433"]

  kafka-redis-consumer:
    build:
      context: ./kafka-redis-consumer
    container_name: test-kafka-redis-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    networks:
      - test_network

  websocket-server:
    build:
      context: ./websocket-server
    container_name: test-websocket-server
    depends_on:
      redis:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    networks:
      - test_network

  qr-login-app:
    build: ./qr-login-system
    container_name: test-qr-login-app
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_HOST=qr-postgres
      - DATABASE_PORT=5433
      - DATABASE_NAME=qrlogin_test
      - DATABASE_USER=qrlogin_test
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - SPRING_REDIS_HOST=qr-redis
      - SPRING_REDIS_PORT=6378
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TOKEN_EXPIRATION=900000
      - JWT_REFRESH_TOKEN_EXPIRATION=604800000
    depends_on:
      qr-postgres:
        condition: service_healthy
      qr-redis:
        condition: service_healthy
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  test_mosquitto_data:
  test_mosquitto_config:

networks:
  test_network:
    driver: bridge
