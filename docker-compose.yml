version: '3.8'

services:
  mosquitto:
    build:
      context: ./mosquitto
    ports:
      - "3123:3123"
    networks:
      - mqtt_network

  kafka:
    build:
      context: ./kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: "Ig3-2uAZRjWjYQHopuv-rw"
    volumes:
      - ./kafka/scripts:/scripts
      - kafka_data:/tmp/kraft-combined-logs
    restart: unless-stopped
    networks:
      - mqtt_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegraf MQTT-Kafka 브릿지
  telegraf:
    build:
      context: ./telegraf
    container_name: telegraf-mqtt-bridge
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_started
    restart: unless-stopped
    networks:
      - mqtt_network

  # Redis 서버
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mqtt_network
    command: redis-server --appendonly yes

  # Kafka -> Redis Consumer
  kafka-redis-consumer:
    build:
      context: ./kafka-redis-consumer
    container_name: kafka-redis-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - mqtt_network
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["python", "consumer_fixed.py"]

  kafka-topics-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-topics-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka/scripts:/scripts
    command: ["/scripts/init_topics.sh"]
    networks:
      - mqtt_network
    restart: "no"

  # WebSocket 좌표 스트리밍 서버
  websocket-server:
    build:
      context: ./websocket-server
    container_name: websocket-server
    depends_on:
      redis:
        condition: service_started
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - mqtt_network
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379

volumes:
  kafka_data:
  redis_data:

networks:
  mqtt_network:
    driver: bridge