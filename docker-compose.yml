services:
  mosquitto:
    build:
      context: ./mosquitto
    container_name: mosquitto
    ports:
      - "3123:3123"
    environment:
      - MQTT_USERNAME=${MQTT_USERNAME:-mqttuser}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqttpass}
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_config:/mosquitto/config
    networks:
      - mqtt_network
    entrypoint: >
      sh -c "
      if [ ! -s /mosquitto/config/passwd ]; then
        echo 'Initializing MQTT password file...';
        mosquitto_passwd -b /mosquitto/config/passwd $${MQTT_USERNAME:-mqttuser} $${MQTT_PASSWORD:-mqttpass};
        echo 'MQTT user created';
      fi;
      exec /docker-entrypoint.sh mosquitto -c /mosquitto/config/mosquitto.conf
      "

  kafka:
    build:
      context: ./kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: "Ig3-2uAZRjWjYQHopuv-rw"
    volumes:
      - ./kafka/scripts:/scripts
      - kafka_data:/tmp/kraft-combined-logs
    restart: unless-stopped
    networks:
      - mqtt_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegraf MQTT-Kafka 브릿지
  telegraf:
    build:
      context: ./telegraf
    container_name: telegraf-mqtt-bridge
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_started
    environment:
      - MQTT_USERNAME=${MQTT_USERNAME:-mqttuser}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqttpass}
    restart: unless-stopped
    networks:
      - mqtt_network

  # Redis 서버 (MQTT용)
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mqtt_network
    command: redis-server --appendonly yes

  # PostgreSQL 데이터베이스 (QR Login용)
  db:
    image: postgres:16-alpine
    container_name: qr-postgres
    ports:
      - "5433:5433"
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-qrlogin}
      POSTGRES_USER: ${DATABASE_USER:-qrlogin}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      PGPORT: 5433
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - mqtt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qrlogin -d qrlogin -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: ["postgres", "-p", "5433"]

  # Redis 서버 (QR Login용)
  qr-redis:
    image: redis:7-alpine
    container_name: qr-redis
    ports:
      - "6378:6378"
    volumes:
      - qr_redis_data:/data
    networks:
      - mqtt_network
    command: redis-server --port 6378 --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6378", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # QR Login 애플리케이션
  qr-login-app:
    build: ./qr-login-system
    container_name: qr-login-app
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-docker}
      - DATABASE_HOST=${DATABASE_HOST:-db}
      - DATABASE_PORT=${DATABASE_PORT:-5433}
      - DATABASE_NAME=${DATABASE_NAME:-qrlogin}
      - DATABASE_USER=${DATABASE_USER:-qrlogin}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - SPRING_REDIS_HOST=${QR_REDIS_HOST:-qr-redis}
      - SPRING_REDIS_PORT=${QR_REDIS_PORT:-6378}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TOKEN_EXPIRATION=${JWT_ACCESS_TOKEN_EXPIRATION:-900000}
      - JWT_REFRESH_TOKEN_EXPIRATION=${JWT_REFRESH_TOKEN_EXPIRATION:-604800000}
      - JAVA_OPTS=${JAVA_OPTS:--Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom}
    depends_on:
      db:
        condition: service_healthy
      qr-redis:
        condition: service_healthy
    networks:
      - mqtt_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs


  kafka-topics-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-topics-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka/scripts:/scripts
    command: ["/scripts/init_topics.sh"]
    networks:
      - mqtt_network
    restart: "no"

  # Python Kafka-Redis Consumer
  kafka-redis-consumer:
    build:
      context: ./kafka-redis-consumer
    container_name: kafka-redis-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - mqtt_network
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  # WebSocket 좌표 스트리밍 서버
  websocket-server:
    build:
      context: ./websocket-server
    container_name: websocket-server
    depends_on:
      redis:
        condition: service_started
      mosquitto:
        condition: service_started
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - mqtt_network
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - MQTT_USERNAME=${MQTT_USERNAME:-mqttuser}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqttpass}

  # QR Login Frontend - 주석 처리 (npm run dev로 별도 실행)
  # frontend:
  #   build:
  #     context: ./frontend/qr-login-frontend
  #   container_name: qr-login-frontend
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./frontend/qr-login-frontend/certs:/etc/nginx/certs:ro
  #   restart: unless-stopped
  #   networks:
  #     - mqtt_network

volumes:
  mosquitto_data:
    driver: local
  mosquitto_config:
    driver: local
  kafka_data:
  redis_data:
  postgres_data:
    driver: local
  qr_redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  mqtt_network:
    driver: bridge